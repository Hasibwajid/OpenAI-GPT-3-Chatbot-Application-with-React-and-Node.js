{"ast":null,"code":"import React,{useState,useEffect,useRef}from'react';import'./Chatbot.css';import ChatIcon from'../assets/robot.png';import axios from'axios';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function Chatbot(){const[messages,setMessages]=useState([{text:\"Hi there! I'm your virtual assistant.\",isUser:false}]);const[inputValue,setInputValue]=useState('');const messagesEndRef=useRef(null);useEffect(()=>{var _messagesEndRef$curre;(_messagesEndRef$curre=messagesEndRef.current)===null||_messagesEndRef$curre===void 0?void 0:_messagesEndRef$curre.scrollIntoView({behavior:\"smooth\"});},[messages]);const handleMessageSubmit=async e=>{e.preventDefault();if(!inputValue.trim())return;// Add user's message to the chat\nsetMessages(prevMessages=>[...prevMessages,{text:inputValue,isUser:true}]);setInputValue('');try{const response=await axios.post(\"http://localhost:9090/chatbot-prompt\",{userPrompt:inputValue});// Handle the response from the server\nconst botResponse=response.data.botResponse;// Add bot's response to the chat\nsetMessages(prevMessages=>[...prevMessages,{text:botResponse,isUser:false}]);}catch(error){console.error('Error:',error.message);setMessages(prevMessages=>[...prevMessages,{text:\"I'm sorry, but I'm currently unable to respond. Please try again later.\",isUser:false,isError:true}]);}};return/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-container\",children:[/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-header\",children:[/*#__PURE__*/_jsx(\"div\",{className:\"avatar\",children:/*#__PURE__*/_jsx(\"img\",{src:ChatIcon,alt:\"Avatar\"})}),/*#__PURE__*/_jsx(\"div\",{className:\"title\",children:\"Virtual Assistant\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"chatbot-messages\",children:[messages.map((msg,index)=>/*#__PURE__*/_jsx(\"div\",{className:msg.isUser?'message user':'message bot',children:msg.text},index)),/*#__PURE__*/_jsx(\"div\",{ref:messagesEndRef})]}),/*#__PURE__*/_jsxs(\"form\",{onSubmit:handleMessageSubmit,className:\"chatbot-input\",children:[/*#__PURE__*/_jsx(\"input\",{type:\"text\",placeholder:\"Type your message...\",value:inputValue,onChange:e=>setInputValue(e.target.value)}),/*#__PURE__*/_jsx(\"button\",{type:\"submit\",children:\"Send\"})]})]});}export default Chatbot;","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatIcon","axios","jsx","_jsx","jsxs","_jsxs","Chatbot","messages","setMessages","text","isUser","inputValue","setInputValue","messagesEndRef","_messagesEndRef$curre","current","scrollIntoView","behavior","handleMessageSubmit","e","preventDefault","trim","prevMessages","response","post","userPrompt","botResponse","data","error","console","message","isError","className","children","src","alt","map","msg","index","ref","onSubmit","type","placeholder","value","onChange","target"],"sources":["C:/Users/PMLS/Desktop/OpenAI-GPT-3-Chatbot-Application-with-React-and-Node.js/chatbot_reactjs/src/components/ChatBot.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport './Chatbot.css';\r\nimport ChatIcon from '../assets/robot.png';\r\nimport axios from 'axios';\r\nfunction Chatbot() {\r\n  const [messages, setMessages] = useState([\r\n    { text: \"Hi there! I'm your virtual assistant.\", isUser: false },\r\n  ]);\r\n  const [inputValue, setInputValue] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  }, [messages]);\r\n\r\n  const handleMessageSubmit = async (e) => {\r\n    e.preventDefault();\r\n    if (!inputValue.trim()) return;\r\n  \r\n    // Add user's message to the chat\r\n    setMessages(prevMessages => [...prevMessages, { text: inputValue, isUser: true }]);\r\n    setInputValue('');\r\n  \r\n    try {\r\n      const response = await axios.post(\"http://localhost:9090/chatbot-prompt\", {\r\n        userPrompt: inputValue,\r\n      });\r\n  \r\n      // Handle the response from the server\r\n      const botResponse = response.data.botResponse;\r\n  \r\n      // Add bot's response to the chat\r\n      setMessages(prevMessages => [...prevMessages, { text: botResponse, isUser: false }]);\r\n    } catch (error) {\r\n      console.error('Error:', error.message);\r\n  \r\n      setMessages(prevMessages => [\r\n        ...prevMessages,\r\n        { text: \"I'm sorry, but I'm currently unable to respond. Please try again later.\", isUser: false, isError: true }\r\n      ]);\r\n    }\r\n  };\r\n  \r\n  return (\r\n    <div className=\"chatbot-container\">\r\n      <div className=\"chatbot-header\">\r\n        <div className=\"avatar\">\r\n          <img src={ChatIcon} alt=\"Avatar\" />\r\n        </div>\r\n        <div className=\"title\">Virtual Assistant</div>\r\n      </div>\r\n      <div className=\"chatbot-messages\">\r\n        {messages.map((msg, index) => (\r\n          <div key={index} className={msg.isUser ? 'message user' : 'message bot'}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <form onSubmit={handleMessageSubmit} className=\"chatbot-input\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type your message...\"\r\n          value={inputValue}\r\n          onChange={(e) => setInputValue(e.target.value)}\r\n        />\r\n        <button type=\"submit\">Send</button>\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}